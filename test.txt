
# üõçÔ∏è **SmartShopperBot** - Amazon Best Deal Finder

## üöÄ **Project Overview**

The **SmartShopperBot** is a Telegram bot that helps you find the best deals for products on **Amazon**. The bot takes in the product description or name and, optionally, the region (Amazon country domain). It then compares listings from multiple sellers and returns the **best deal** based on **price**, **reviews**, **ratings**, **delivery time**, and more. If no region is provided, the bot defaults to **amazon.com** (USA).

---

## üéØ **Core Features**

### 1. **User Input**

The bot interacts with users via Telegram. The user will provide:

* **Website (Region)**:

  * The user can specify which Amazon domain to search (e.g., `amazon.com`, `amazon.co.uk`, etc.).
  * If no region is provided, it defaults to **`amazon.com`**.

* **Product Name/Description**:

  * The user can input a product's name (e.g., `"wireless earbuds"`) or a more detailed product description (e.g., `"Men‚Äôs luxury waterproof watch"`).

#### Example Commands:

* `/find amazon.com Men's waterproof watch` ‚Äì **Region specified** as `amazon.com`.
* `/find amazon Men's waterproof watch` ‚Äì **No region provided**, defaults to `amazon.com`.

---

### 2. **Search Product Listings via Amazon API**

The bot uses the **Amazon Product Advertising API** to search for the product specified by the user. It queries Amazon to fetch all relevant listings for the product, considering different sellers and their prices.

* **API Calls**:

  * If a region is provided, the bot uses that specific Amazon domain‚Äôs API (e.g., `amazon.com`, `amazon.co.uk`).
  * If no region is provided, it defaults to **amazon.com**.

The bot will gather:

* **Product Name**
* **Price** (new, used, or list price)
* **Seller Name**
* **Product Rating**
* **Number of Reviews**
* **Prime Eligibility** (Is the seller offering Amazon Prime shipping?)
* **Estimated Delivery Time**

---

### 3. **Compare Listings**

Once the product is found, the bot compares the different listings based on key factors:

* **Price**:

  * Compare prices across different sellers (including any additional shipping fees).
* **Seller Rating**:

  * Ensure the seller has a good reputation (e.g., 4 stars and above).
* **Number of Reviews**:

  * Only show products with a sufficient number of reviews (e.g., > 100).
* **Prime Eligibility**:

  * Prioritize Amazon sellers who offer Prime for faster shipping.
* **Delivery Speed**:

  * Prioritize listings that offer faster delivery times, if the user specifies urgency.

---

### 4. **Decision Engine** - Best Deal Selection

The bot uses a **scoring algorithm** to pick the best deal from the available listings. The algorithm considers multiple factors such as:

#### Example Scoring System:

* **Rating** (40% weight): Products with higher ratings are prioritized.
* **Number of Reviews** (20% weight): More reviews typically indicate higher trustworthiness.
* **Price** (30% weight): Cheaper options are given priority, with discounts considered.
* **Delivery Speed** (10% weight): Faster delivery times get a slight boost in scoring.

If multiple products are of equal value, the bot might ask the user to select a specific preference (e.g., "Do you prefer cheaper or faster delivery?").

---

### 5. **Send Best Deal to User via Telegram**

After determining the best deal, the bot formats the results and sends them back to the user with a **direct link** to the product on Amazon.

#### Example Output:

```
‚úÖ **Best Deal Found!**
**Product:** Dre‚Äôs Waterproof Leather Strap Quartz Watch  
**Price:** $24.99  
**Rating:** 4.5 ‚≠êÔ∏è (2,140 reviews)  
**Seller:** Amazon  
**Prime Eligibility:** Yes  
**Link:** [Amazon Product Link](https://www.amazon.com/dp/B0XXXXXX)
```

Additionally, the bot can also include a product image, if available.

---

### 6. **Optional Region Input**

If a region is provided by the user (e.g., `amazon.co.uk`), the bot will use that Amazon domain to search the product.

* **Example 1 (Region specified)**:

  ```
  /find amazon.co.uk Men's waterproof watch
  ```

  The bot will search for the product on **amazon.co.uk**.

* **Example 2 (No region specified)**:

  ```
  /find amazon Men's waterproof watch
  ```

  The bot defaults to **amazon.com**.

This feature makes the bot flexible, allowing it to work with any Amazon region (e.g., .com, .co.uk, .ca, .de).

---

## üõ†Ô∏è **Technical Requirements**

### 1. **Amazon Product Advertising API**

To search for products and gather data, the bot will use the **Amazon Product Advertising API**.

* **Access Key**: For authenticating requests.
* **Secret Key**: For signing API requests.
* **Associate Tag**: The affiliate tag that links to your Amazon account.
* The bot will need to handle **API rate limits**, as the API only allows a certain number of calls per day.

### 2. **Telegram Bot Setup**

* **BotFather**: Use Telegram‚Äôs BotFather to create a new bot and get the token.
* **Bot Framework**: Use libraries like **python-telegram-bot** to easily interact with the Telegram API.

### 3. **Hosting**

* The bot can be hosted on a cloud platform such as **Heroku**, **Railway**, or a custom VPS.
* Ensure the bot can run continuously and process requests in real-time.

### 4. **Data Handling**

* **Rate Limiting**: If the user searches too often, implement rate limiting (using Redis or an in-memory store) to avoid being blocked by Amazon.
* **Logging**: Log each search request and the corresponding API call to troubleshoot issues and monitor performance.

---

## üìÅ **Folder Structure**

The project folder structure can be organized as follows:

```
smartshopper_bot/
‚îú‚îÄ‚îÄ main.py                    # Main file handling bot commands and logic
‚îú‚îÄ‚îÄ telegram_bot/
‚îÇ   ‚îú‚îÄ‚îÄ handler.py             # Handles interactions with users
‚îÇ   ‚îî‚îÄ‚îÄ message_formatter.py   # Formats messages and responses
‚îú‚îÄ‚îÄ amazon_api/
‚îÇ   ‚îú‚îÄ‚îÄ client.py              # Amazon API calls (region-specific handling)
‚îÇ   ‚îî‚îÄ‚îÄ product_selector.py    # Logic to filter and compare product listings
‚îú‚îÄ‚îÄ utils/
‚îÇ   ‚îî‚îÄ‚îÄ scoring.py             # Scoring algorithm for best deal selection
‚îî‚îÄ‚îÄ config/
    ‚îî‚îÄ‚îÄ settings.env           # Store Amazon API credentials and settings
```

---

## üîß **Optional Enhancements (Future)**

* **User History**: Save product searches and notify users when prices drop.
* **Multiple Preferences**: Allow the user to specify preferences (cheapest vs fastest delivery).
* **Region History**: Remember the user‚Äôs preferred region for future searches.

---

## üö® **Risks and Limitations**

* **API Rate Limits**: Amazon‚Äôs API allows limited requests per day. The bot must handle this gracefully.
* **Region-Specific Data**: Prices may vary significantly between regions. Ensure region detection and handling is accurate.
* **Anti-bot Measures**: Amazon may throttle or block the bot if it detects high-volume scraping.

---

AMAZON API DOCUMENTATION: https://webservices.amazon.com/paapi5/documentation/

CREATE A .env FILE FOR TELEGRAM API AND OTHER environment variables. 



### ‚úÖ **Conclusion**

This **SmartShopperBot** allows you to find the best deals on Amazon by comparing product listings across multiple sellers. It supports both region-specific searches and defaults to **amazon.com** if no region is provided. The bot is scalable, user-friendly, and can be expanded with additional features such as price drop alerts or multiple region support in the future.

---
